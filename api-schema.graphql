# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AccountCreateEmailInput {
  email: String!
}

input AccountUpdatePasswordInput {
  currentPassword: String!
  password: String!
  verified: String!
}

input AccountUpdateProfileInput {
  avatarUrl: String
  bio: String
  dob: DateTime
  firstName: String
  lastName: String
  location: String
  phone: String
}

input AdminCreateTenantInput {
  name: String!
}

input AdminCreateUserInput {
  email: String!
  firstName: String
  lastName: String
  role: Role!
  username: String
}

input AdminUpdateTenantInput {
  name: String
}

input AdminUpdateUserInput {
  avatarUrl: String
  bio: String
  firstName: String
  lastName: String
  location: String
  phone: String
  role: Role
  username: String
}

type AuthToken {
  """JWT Bearer token"""
  token: String!
}

type CorePaging {
  limit: Int
  skip: Int
  total: Int
}

input CorePagingInput {
  limit: Int = 10
  skip: Int = 0
}

input CreateSchemaEntityFieldInput {
  dataType: DataType!
  description: String
  fieldType: FieldType!
  id: String
  isName: Boolean
  isNullable: Boolean
  name: String!
}

input CreateSchemaEntityForeignKeyInput {
  id: String
  name: String!
  relatedEntity: CreateSchemaRelatedEntityInput!
  relatedField: CreateSchemaEntityFieldInput!
}

input CreateSchemaEntityInput {
  description: String
  fields: [CreateSchemaEntityFieldInput!]
  foreignKeys: [CreateSchemaEntityForeignKeyInput!]
  id: String
  keys: [CreateSchemaEntityKeyInput!]
  name: String!
  ontologies: [CreateSchemaEntityOntologyInput!]
}

input CreateSchemaEntityKeyInput {
  description: String!
  id: String
  isDrivingKey: Boolean!
  keyType: KeyType!
  name: String!
}

input CreateSchemaEntityOntologyInput {
  id: String
  key: String!
  value: String!
}

input CreateSchemaEntityRelationInput {
  description: String
  id: String
  name: String!
  relatedId: String!
  type: RelationType!
}

input CreateSchemaEnumInput {
  description: String
  id: String
  name: String!
  values: [String!]
}

input CreateSchemaInput {
  entities: [CreateSchemaEntityInput!]
  id: String
  name: String!
  stage: Stage
}

input CreateSchemaRelatedEntityInput {
  id: String
  name: String!
  ontologies: [CreateSchemaEntityOntologyInput!]!
}

input CreateTenantInput {
  name: String!
}

enum DataType {
  Boolean
  DateTime
  Enumeration
  Float
  Integer
  Json
  String
  Text
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Email {
  createdAt: DateTime
  email: String
  id: String
  primary: Boolean
  public: Boolean
  updatedAt: DateTime
  verified: Boolean
}

type Entity {
  createdAt: DateTime
  description: String
  dynamicProperties: JSON
  fields: [Field!]
  foreignKeys: [ForeignKey!]
  id: ID
  keys: [Key!]
  keywords: [String!]
  name: String
  ontologies: [Ontology!]
  publishedAt: DateTime
  related: [Relation!]
  relations: [Relation!]
  stage: Stage
  updatedAt: DateTime
}

type EntitySummary {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  publishedAt: DateTime
  stage: Stage
  updatedAt: DateTime
}

type Enum {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  updatedAt: DateTime
  values: [String!]
}

type Field {
  createdAt: DateTime
  dataType: DataType
  description: String
  fieldType: FieldType
  id: ID
  isName: Boolean
  isNullable: Boolean
  name: String
  publishedAt: DateTime
  stage: Stage
  updatedAt: DateTime
}

type FieldDataType {
  data: DataType
  description: String
  field: FieldType
  id: ID
  name: String
}

enum FieldType {
  Asset
  Boolean
  Color
  Date
  DateTime
  Dropdown
  Float
  Json
  Location
  Markdown
  MultiLineText
  Number
  Reference
  RichText
  SingleLineOfText
  Slug
  Typeahead
}

type ForeignKey {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  publishedAt: DateTime
  relatedEntity: EntitySummary
  relatedField: [Field!]
  stage: Stage
  updatedAt: DateTime
}

type IntercomMessage {
  payload: JSON
  scope: String
  type: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Key {
  createdAt: DateTime
  description: String
  id: ID
  isDrivingKey: Boolean
  keyType: KeyType
  name: String
  stage: Stage
  updatedAt: DateTime
}

enum KeyType {
  Composite
  Guid
  Int
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  accountCreateEmail(input: AccountCreateEmailInput!): Email
  accountDeleteEmail(emailId: String!): Email
  accountMarkEmailPrimary(emailId: String!): Email
  accountMarkEmailPrivate(emailId: String!): Email
  accountMarkEmailPublic(emailId: String!): Email
  accountResetPassword: Boolean
  accountUpdatePassword(input: AccountUpdatePasswordInput!): Boolean
  accountUpdateProfile(input: AccountUpdateProfileInput!): User
  accountUpdateUsername(username: String!): User
  adminAddTenantUser(role: TenantRole!, tenantId: String!, userId: String!): TenantUser
  adminCreateTenant(input: AdminCreateTenantInput!): Tenant
  adminCreateUser(input: AdminCreateUserInput!): User
  adminDeleteTenant(tenantId: String!): Tenant
  adminDeleteUser(userId: String!): User
  adminRemoveTenantUser(tenantUserId: String!): TenantUser
  adminSetUserPassword(password: String!, userId: String!): User
  adminUpdateTenant(input: AdminUpdateTenantInput!, tenantId: String!): Tenant
  adminUpdateTenantUserRole(role: TenantRole!, tenantUserId: String!): TenantUser
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  createEntityField(entityId: String!, input: CreateSchemaEntityFieldInput!): Field
  createEntityRelation(entityId: String!, input: CreateSchemaEntityRelationInput!): Relation
  createSchema(input: CreateSchemaInput!, tenantId: String!): Schema
  createSchemaEntity(input: CreateSchemaEntityInput!, schemaId: String!): Entity
  createSchemaEnum(input: CreateSchemaEnumInput!, schemaId: String!): Enum
  createTenant(input: CreateTenantInput!): Tenant
  deleteEntityField(fieldId: String!): Field
  deleteEntityRelation(relationId: String!): Relation
  deleteSchemaEnum(enumId: String!): Enum
  intercomPub(payload: JSON, scope: String, type: String!): IntercomMessage
  login(input: LoginInput!): AuthToken
  logout: Boolean
  register(input: RegisterInput!): AuthToken
  updateEntityField(fieldId: String!, input: UpdateSchemaEntityFieldInput!): Field
  updateEntityRelation(input: UpdateSchemaEntityRelationInput!, relationId: String!): Relation
  updateSchema(input: UpdateSchemaInput!, schemaId: String!): Schema
  updateSchemaEntity(entityId: String!, input: UpdateSchemaEntityInput!): Entity
  updateSchemaEnum(enumId: String!, input: UpdateSchemaEnumInput!): Enum
}

type Ontology {
  createdAt: DateTime
  description: String
  id: ID
  key: String
  name: String
  stage: Stage
  updatedAt: DateTime
  value: String
}

type Query {
  accountEmails: [Email!]
  accountProfile: User
  accountUsernameAvailable(username: String!): Boolean
  adminCountTenants(paging: CorePagingInput): CorePaging
  adminCountUsers(paging: CorePagingInput): CorePaging
  adminTenant(tenantId: String!): Tenant
  adminTenants(paging: CorePagingInput): [Tenant!]
  adminUser(userId: String!): User
  adminUsers(paging: CorePagingInput): [User!]
  fieldDataTypes: [FieldDataType!]
  me: User
  schema(schemaId: String!): Schema
  schemata(tenantId: String!): [Schema!]
  tenant(tenantId: String!): Tenant
  tenantRole(tenantId: String!): TenantRole
  tenants: [Tenant!]
  uptime: Float
}

input RegisterInput {
  avatarUrl: String
  email: String!
  firstName: String
  lastName: String
  password: String!
  phone: String
  username: String
}

type Relation {
  createdAt: DateTime
  description: String
  entity: Entity
  id: ID
  name: String
  related: Entity
  type: RelationType
  updatedAt: DateTime
}

enum RelationType {
  ManyToMany
  ManyToOne
  OneToMany
  OneToOne
}

enum Role {
  Admin
  SuperAdmin
  User
}

type Schema {
  createdAt: DateTime
  entities: [Entity!]
  enums: [Enum!]
  id: ID
  name: String
  publishedAt: DateTime
  stage: Stage
  updatedAt: DateTime
}

enum Stage {
  DEV
  PRODUCTION
  UAT
}

type Subscription {
  intercomSub(scope: String, type: String): IntercomMessage
}

type Tenant {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
  users: [TenantUser!]
}

enum TenantRole {
  Owner
  User
}

type TenantUser {
  createdAt: DateTime
  id: ID
  role: TenantRole
  tenant: Tenant
  updatedAt: DateTime
  user: User
}

input UpdateSchemaEntityFieldInput {
  description: String
  isName: Boolean
  isNullable: Boolean
  name: String
}

input UpdateSchemaEntityInput {
  description: String
  name: String
}

input UpdateSchemaEntityRelationInput {
  description: String
  name: String
}

input UpdateSchemaEnumInput {
  description: String
  name: String
  values: [String!]
}

input UpdateSchemaInput {
  name: String!
}

type User {
  avatarUrl: String
  bio: String
  createdAt: DateTime
  email: String
  emails: [Email!]
  firstName: String
  id: String
  lastName: String
  location: String
  name: String
  phone: String
  role: Role
  updatedAt: DateTime
  username: String
}
