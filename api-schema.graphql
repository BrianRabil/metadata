# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminCreateTenantInput {
  name: String!
}

input AdminCreateUserInput {
  email: String!
  firstName: String
  lastName: String
  role: Role!
  username: String
}

input AdminUpdateTenantInput {
  name: String
}

input AdminUpdateUserInput {
  avatarUrl: String
  bio: String
  email: String
  firstName: String
  lastName: String
  location: String
  phone: String
  role: Role
  username: String
}

type CorePaging {
  limit: Int
  skip: Int
  total: Int
}

input CorePagingInput {
  limit: Int = 10
  skip: Int = 0
}

input CreateSchemaInput {
  name: String!
}

input CreateTenantInput {
  name: String!
}

enum DataType {
  Boolean
  DateTime
  Enumeration
  Float
  Integer
  String
  Text
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Entity {
  createdAt: DateTime
  description: String
  dynamicProperties: JSON
  fields: [Field!]
  foreignKeys: [ForeignKey!]
  id: ID
  keys: [Key!]
  keywords: [String!]
  name: String
  ontologies: [Ontology!]
  publishedAt: DateTime
  stage: Stage
  updatedAt: DateTime
}

type Field {
  createdAt: DateTime
  dataType: DataType
  description: String
  id: ID
  isName: Boolean
  isNullable: Boolean
  keyType: FieldType
  name: String
  publishedAt: DateTime
  stage: Stage
  updatedAt: DateTime
}

enum FieldType {
  Asset
  Boolean
  Color
  Date
  DateTime
  Dropdown
  Float
  Json
  Location
  Markdown
  MultiLineText
  Number
  Reference
  RichText
  SingleLineOfText
  Slug
  Typeahead
}

type ForeignKey {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  publishedAt: DateTime
  relatedEntity: Entity
  relatedField: [Field!]
  stage: Stage
  updatedAt: DateTime
}

type IntercomMessage {
  payload: JSON
  scope: String
  type: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Key {
  createdAt: DateTime
  description: String
  id: ID
  isDrivingKey: Boolean
  keyType: KeyType
  name: String
  stage: Stage
  updatedAt: DateTime
}

enum KeyType {
  Composite
  Guid
  Int
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  adminAddTenantUser(role: TenantRole!, tenantId: String!, userId: String!): TenantUser
  adminCreateTenant(input: AdminCreateTenantInput!): Tenant
  adminCreateUser(input: AdminCreateUserInput!): User
  adminDeleteTenant(tenantId: String!): Tenant
  adminDeleteUser(userId: String!): User
  adminRemoveTenantUser(tenantUserId: String!): TenantUser
  adminUpdateTenant(input: AdminUpdateTenantInput!, tenantId: String!): Tenant
  adminUpdateTenantUserRole(role: TenantRole!, tenantUserId: String!): TenantUser
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  createSchema(input: CreateSchemaInput!, tenantId: String!): Schema
  createTenant(input: CreateTenantInput!): Tenant
  intercomPub(payload: JSON, scope: String, type: String!): IntercomMessage
  login(input: LoginInput!): UserToken
  logout: Boolean
  register(input: RegisterInput!): UserToken
  updateSchema(input: UpdateSchemaInput!, schemaId: String!): Schema
}

type Ontology {
  createdAt: DateTime
  description: String
  id: ID
  key: String
  name: String
  stage: Stage
  updatedAt: DateTime
  value: String
}

type Query {
  adminCountTenants(paging: CorePagingInput): CorePaging
  adminCountUsers(paging: CorePagingInput): CorePaging
  adminTenant(tenantId: String!): Tenant
  adminTenants(paging: CorePagingInput): [Tenant!]
  adminUser(userId: String!): User
  adminUsers(paging: CorePagingInput): [User!]
  me: User
  schema(schemaId: String!): Schema
  schemata(tenantId: String!): [Schema!]
  tenant(tenantId: String!): Tenant
  tenantRole(tenantId: String!): TenantRole
  tenants: [Tenant!]
  uptime: Float
}

input RegisterInput {
  avatarUrl: String
  email: String!
  firstName: String
  lastName: String
  password: String!
  phone: String
  username: String
}

"""User role"""
enum Role {
  Admin
  SuperAdmin
  User
}

type Schema {
  createdAt: DateTime
  entities: [Entity!]
  id: ID
  name: String
  publishedAt: DateTime
  stage: Stage
  updatedAt: DateTime
}

enum Stage {
  DEV
  PRODUCTION
  UAT
}

type Subscription {
  intercomSub(scope: String, type: String): IntercomMessage
}

type Tenant {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
  users: [TenantUser!]
}

enum TenantRole {
  Owner
  User
}

type TenantUser {
  createdAt: DateTime
  id: ID
  role: TenantRole
  tenant: Tenant
  updatedAt: DateTime
  user: User
}

input UpdateSchemaInput {
  name: String!
}

type User {
  avatarUrl: String
  bio: String
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  location: String
  name: String
  phone: String
  role: Role
  updatedAt: DateTime
  username: String
}

type UserToken {
  """JWT Bearer token"""
  token: String!
  user: User!
}
