import { DataType } from '@prisma/client'
import { createEntity, createField, createOntology } from '../lib/helpers'

export const defaultEntity = createEntity(
  'Address',
  'Serves as an address where we can locate or ship to this entity.',
  ['keywords'],
  {
    ontologies: [
      createOntology('queryName', '$"{item.className + "Query"}";'),
      createOntology('entityName', 'item.className;'),
      createOntology('pascalSingleEntity', 'entityName.Singularize(false).Pascalize();'),
      createOntology('pascalEntity', 'entityName.Pascalize();'),
      createOntology(
        'pascalPluralEntity',
        'entityName.Pluralize(false).Replace("PrescriptionDiagnoses", "PrescriptionDiagnosis");',
      ),
      createOntology('camelizeEntity', 'entityName.Camelize();'),
      createOntology('entityPluralName', 'camelizeEntity.Pluralize();'),
      createOntology('entityIdType', 'item.entityIdType;'),
      createOntology('usingChoice', '_usings;'),
      createOntology('hasIdProperty', 'item.loadProps.Any(p => p.Identifier.ValueText == "Id");'),
      createOntology('hasNameProperty', 'item.loadProps.Any(p => p.Identifier.ValueText == "Name");'),
    ],
    fields: [
      createField(
        DataType.String,
        'Name',
        true,
        false,
        'The name of the Address, it is used for searching purposes.  Example, Primary, Ship To, Billing.',
      ),
      createField(DataType.String, 'primary_number', false, true, 'The house, PO Box, or building number'),
      createField(DataType.String, 'street_name', false, true, 'The name of the street'),
      createField(
        DataType.String,
        'street_suffix',
        false,
        true,
        'Abbreviated value describing the street (St, Ave, Blvd, etc.)',
      ),
      createField(
        DataType.String,
        'street_predirection',
        false,
        true,
        'Directional information before a street name (N, SW, etc.)',
      ),
      createField(
        DataType.String,
        'street_postdirection',
        false,
        true,
        'Directional information after a street name (N, SW, etc.)',
      ),
      createField(
        DataType.String,
        'city_name',
        false,
        true,
        'The USPS-preferred city name for this particular address, or an acceptable alternate if provided by the user',
      ),
      createField(DataType.String, 'default_city_name', false, true, 'The default city name for this 5-digit ZIP Code'),
      createField(DataType.String, 'state_abbreviation', false, true, 'The '),
      createField(DataType.String, 'zipcode', false, true, 'The two-letter state abbreviation'),
      createField(
        DataType.String,
        'plus4_code',
        false,
        true,
        'The 4-digit add-on code (more specific than 5-digit ZIP)',
      ),
      createField(
        DataType.String,
        'delivery_point',
        false,
        true,
        "The last two digits of the house/box number, unless an 'H' record is matched, in which case this is the secondary unit number representing the delivery point information to form the delivery point barcode (DPBC).",
      ),
      createField(
        DataType.String,
        'delivery_point_check_digit',
        false,
        true,
        "The last two digits of the house/box number, unless an 'H' record is matched, in which case this is the secondary unit number representing the delivery point information to form the delivery point barcode (DPBC).",
      ),
      createField(
        DataType.String,
        'record_type',
        false,
        true,
        'Indicates the type of record that was matched. Only given if a DPV match is made.',
      ),
      createField(
        DataType.String,
        'zip_type',
        false,
        true,
        'Indicates the type of the ZIP Code for the address that was matched. Only given if a 5-digit match is made.',
      ),
      createField(
        DataType.String,
        'county_fips',
        false,
        true,
        'The 5-digit county FIPS (Federal Information Processing Standards) code. It is a combination of a 2-digit state FIPS code and a 3-digit county code assigned by the NIST (National Institute of Standards and Technology).',
      ),
      createField(
        DataType.String,
        'county_name',
        false,
        true,
        'The name of the county in which the address is located',
      ),
      createField(
        DataType.String,
        'carrier_route',
        false,
        true,
        'The postal carrier route for the address. Consists of a one-letter prefix followed by a three-digit route designator.(e.g., C007, R123)',
      ),
      createField(
        DataType.String,
        'congressional_district',
        false,
        true,
        "The congressional district to which the address belongs. Output will be two digits from 01 - 53 or 'AL.' 'AL' means that the entire state (or territory) is covered by a single congressional district. These include Alaska, Delaware, Montana, North Dakota, South Dakota, Vermont, Wyoming, Washington DC, Virgin Islands, and other territories.",
      ),
      createField(DataType.String, 'rdi', false, true, 'Residential Delivery Indicator (residential or commercial)'),
      createField(DataType.String, 'elot_sequence', false, true, '(Enhanced Line of Travel) 4-digit sequence number'),
      createField(
        DataType.String,
        'elot_sort',
        false,
        true,
        'eLOT (Enhanced Line of Travel) product was developed to give mailers the ability to sort their mailings by line of travel sequence.',
      ),
      createField(
        DataType.Float,
        'latitude',
        false,
        true,
        'The horizontal component used for geographic positioning. It is the angle between 0° (the equator) and ±90° (north or south) at the poles. It is the first value in an ordered pair of (latitude, longitude). A negative number denotes a location below the equator; a positive number is above the equator. Combining lat/long values enables you to pinpoint addresses on a map.',
      ),
      createField(
        DataType.Float,
        'longitude',
        false,
        true,
        'The vertical component used for geographic positioning. It is the angle between 0° (the Prime Meridian) and ±180° (westward or eastward). It is the second number in an ordered pair of (latitude, longitude). A negative number indicates a location west of Greenwich, England; a positive number east. Combining lat/long values enables you to pinpoint addresses on a map.',
      ),
      createField(
        DataType.String,
        'time_zone',
        false,
        true,
        'Indicates the common name of the time zone associated with the address.',
      ),
      createField(
        DataType.Integer,
        'utc_offset',
        false,
        true,
        'Indicates the number of hours the time zone is offset from Universal Time Coordinated (UTC), the international time standard, also known as Greenwich Meridian Time (GMT).',
      ),
      createField(
        DataType.Boolean,
        'dst',
        false,
        true,
        "Indicates if the time zone 'obeys,' or, in other words, adjusts their clocks forward and back with the seasons. This information is particularly useful to determine time in other time zones with areas that may or may not use daylight saving time - for example, Arizona, Hawaii, and, of all places, Indiana.",
      ),
    ],
  },
)
